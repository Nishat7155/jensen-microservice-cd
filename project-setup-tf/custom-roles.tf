# resource "google_project_iam_custom_role" "identity_role" {
#   role_id     = "customRoleIdentity"
#   title       = "Cloud Run Identity Custom Role"
#   description = "Custom role for Cloud Run identity"
#   permissions = [
#     "iam.serviceAccounts.actAs",
#     "datastore.entities.get",
#     "datastore.entities.list",
#     "datastore.entities.create",
#     "datastore.entities.delete",
#     "datastore.entities.update",
#     "pubsub.topics.publish",
#     "secretmanager.versions.access"
#   ]
# }
resource "google_project_iam_custom_role" "deploy_role_allen-demo" {
  role_id     = "customRoleDeploy"
  title       = "Deploy Custom Role allen-demo"
  description = "Custom role for deploy workflows of allen-demo"
  permissions = [
    "artifactregistry.repositories.uploadArtifacts",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.tags.create",
    "artifactregistry.tags.get",
    "artifactregistry.tags.list",
    "artifactregistry.tags.update",
    "cloudfunctions.functions.create",
    "cloudfunctions.functions.delete",
    "cloudfunctions.functions.get",
    "cloudfunctions.functions.getIamPolicy",
    "cloudfunctions.functions.setIamPolicy",
    "cloudfunctions.functions.sourceCodeSet",
    "cloudfunctions.functions.update",
    "cloudfunctions.operations.get",
    "compute.backendServices.create",
    "compute.backendServices.get",
    "compute.globalOperations.get",
    "compute.globalAddresses.create",
    "compute.globalAddresses.get",
    "compute.globalForwardingRules.create",
    "compute.globalForwardingRules.get",
    "compute.regionOperations.get",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionNetworkEndpointGroups.create",
    "compute.regionNetworkEndpointGroups.get",
    "compute.sslCertificates.create",
    "compute.sslCertificates.get",
    "compute.targetHttpProxies.create",
    "compute.targetHttpProxies.get",
    "compute.targetHttpsProxies.create",
    "compute.targetHttpsProxies.get",
    "compute.urlMaps.create",
    "compute.urlMaps.get",
    "compute.securityPolicies.create",
    "compute.securityPolicies.get",
    "compute.securityPolicies.delete",
    "compute.securityPolicies.update",
    "compute.backendServices.update",
    "compute.backendServices.setSecurityPolicy",
    "compute.securityPolicies.use",
    "logging.logEntries.create",
    "iam.serviceAccounts.actAs",
    "pubsub.schemas.attach",
    "pubsub.schemas.commit",
    "pubsub.schemas.create",
    "pubsub.schemas.delete",
    "pubsub.schemas.get",
    "pubsub.schemas.list",
    "pubsub.schemas.listRevisions",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.delete",
    "pubsub.topics.detachSubscription",
    "pubsub.topics.get",
    "pubsub.topics.getIamPolicy",
    "pubsub.topics.list",
    "pubsub.topics.setIamPolicy",
    "pubsub.topics.update",
    "pubsub.topics.updateTag",
    "resourcemanager.projects.get",
    "run.revisions.list",
    "run.services.create",
    "run.services.delete",
    "run.services.get",
    "run.services.getIamPolicy",
    "run.services.setIamPolicy",
    "run.services.update",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.get",
    "storage.buckets.list",
    "storage.objects.get",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.list",
    "serviceusage.services.list"

  ]
}
# resource "google_project_iam_custom_role" "storage_role_allen-demo" {
#   role_id     = "customRoleStorage"
#   title       = "Storage Custom Role allen-demo"
#   description = "Custom role for access to Cloud Storage for allen-demo"
#   permissions = [
#     "resourcemanager.projects.get",
#     "storage.buckets.create",
#     "storage.buckets.update",
#     "storage.buckets.get",
#     "storage.buckets.getIamPolicy",
#     "storage.buckets.setIamPolicy",
#     "storage.buckets.list",
#     "storage.objects.create",
#     "storage.objects.delete",
#     "storage.objects.get",
#     "storage.objects.list",
#     "storage.objects.update"
#   ]
# }
# resource "google_project_iam_custom_role" "developer_role" {
#   role_id     = "customRoleDeveloper"
#   title       = "Developer Custom Role"
#   description = "The main role for developers in the campman-api taem"
#   permissions = [
#     "cloudasset.assets.listPubsubSnapshots",
#     "cloudasset.assets.listPubsubSubscriptions",
#     "cloudasset.assets.listPubsubTopics",
#     "cloudasset.assets.searchAllResources",
#     "cloudbuild.builds.get",
#     "cloudbuild.builds.list",
#     "cloudfunctions.functions.get",
#     "cloudfunctions.functions.list",
#     "cloudfunctions.functions.sourceCodeGet",
#     "cloudfunctions.locations.get",
#     "cloudfunctions.locations.list",
#     "cloudfunctions.operations.get",
#     "cloudfunctions.operations.list",
#     "cloudfunctions.runtimes.list",
#     "cloudnotifications.activities.list",
#     "cloudscheduler.jobs.fullView",
#     "cloudscheduler.jobs.get",
#     "cloudscheduler.jobs.run",
#     "cloudscheduler.jobs.enable",
#     "cloudscheduler.jobs.pause",
#     "cloudscheduler.jobs.list",
#     "cloudscheduler.locations.get",
#     "cloudscheduler.locations.list",
#     "datastore.databases.get",
#     "datastore.databases.getMetadata",
#     "datastore.databases.list",
#     "datastore.entities.create",
#     "datastore.entities.delete",
#     "datastore.entities.get",
#     "datastore.entities.list",
#     "datastore.entities.update",
#     "datastore.indexes.get",
#     "datastore.indexes.list",
#     "errorreporting.applications.list",
#     "errorreporting.errorEvents.list",
#     "errorreporting.groupMetadata.get",
#     "errorreporting.groups.list",
#     "logging.logEntries.list",
#     "logging.logServiceIndexes.list",
#     "logging.logServices.list",
#     "logging.logs.list",
#     "logging.logMetrics.get",
#     "logging.logMetrics.list",
#     "monitoring.services.get",
#     "monitoring.services.list",
#     "monitoring.dashboards.get",
#     "monitoring.dashboards.list",
#     "monitoring.groups.get",
#     "monitoring.groups.list",
#     "monitoring.metricDescriptors.get",
#     "monitoring.metricDescriptors.list",
#     "monitoring.monitoredResourceDescriptors.get",
#     "monitoring.monitoredResourceDescriptors.list",
#     "monitoring.publicWidgets.get",
#     "monitoring.publicWidgets.list",
#     "monitoring.timeSeries.list",
#     "monitoring.uptimeCheckConfigs.get",
#     "monitoring.uptimeCheckConfigs.list",
#     "pubsub.schemas.get",
#     "pubsub.schemas.list",
#     "pubsub.snapshots.get",
#     "pubsub.snapshots.list",
#     "pubsub.subscriptions.get",
#     "pubsub.subscriptions.list",
#     "pubsub.topics.get",
#     "pubsub.topics.list",
#     "pubsub.topics.publish",
#     "resourcemanager.projects.get",
#     "run.jobs.get",
#     "run.jobs.list",
#     "run.locations.get",
#     "run.locations.list",
#     "run.revisions.get",
#     "run.revisions.list",
#     "run.routes.get",
#     "run.routes.list",
#     "run.services.get",
#     "run.services.list",
#     "run.services.listEffectiveTags",
#     "run.services.listTagBindings",
#     "serviceusage.services.get",
#     "secretmanager.locations.list",
#     "secretmanager.secrets.create",
#     "secretmanager.secrets.get",
#     "secretmanager.secrets.list",
#     "secretmanager.secrets.update",
#     "secretmanager.versions.access",
#     "secretmanager.versions.add",
#     "secretmanager.versions.disable",
#     "secretmanager.versions.enable",
#     "secretmanager.versions.get",
#     "secretmanager.versions.list",
#     "source.repos.get",
#     "source.repos.getProjectConfig",
#     "source.repos.list",
#     "storage.buckets.get",
#     "storage.buckets.list",
#     "storage.objects.get",
#     "storage.objects.list"
#   ]
# }